library(shiny); runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('apheresis.R')
runApp('apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
runApp('apheresis.R')
runApp('apheresis.R')
runApp('C:/Users/Raza/OneDrive - University of Toronto/git/shiny/apheresis/apheresis.R')
colnames(hb_df) <- c("RequestNum", "Barcode", "Lab", "MRN", "CollectionT", "ReceiptT", "ResultT", "SampleLocation", "Type", "Site", "Source", "Priority", "Hb")
library(dplyr)
library(tidyverse)
library(rvest)
library(ggplot2)
library(data.table)
list.files()
hb_dat <- "HPM_hb.csv"
fullpath <- file.path(getwd(), hb_dat) #creates the full path for you depending on OS
file.exists(hb_dat)
hb_data <- read_csv(fullpath)
hb_df <- as.data.frame(hb_data)
colnames(hb_df) <- c("RequestNum", "Barcode", "Lab", "MRN", "CollectionT", "ReceiptT", "ResultT", "SampleLocation", "Type", "Site", "Source", "Priority", "Hb")
hbde <- hb_df %>% filter(!(is.na(Hb)))  #remove rows with pre-hb = null
hbdf <- head(hbde, 10000) #for beta testing, subset of data
hbdf <- hbdf %>% separate(CollectionT, c("CollectionDate", "CollectionTime"), " ", fill="right") #separate date and time
hbdf <- hbdf %>% separate(ReceiptT, c("ReceiptDate", "ReceiptTime"), " ", fill="right") #separate date and time
hbdf <- hbdf %>% separate(ResultT, c("ResultDate", "ResultTime"), " ", fill="right") #separate date and time
hbdf <- hbdf[c("RequestNum", "Lab", "MRN", "CollectionDate", "CollectionTime", "SampleLocation", "Site", "Type", "Source", "Hb")] #limit the number of columns you are working with
hbdf <- hbdf %>% filter(Type=="IP") #filter only inpatient
hb_upper= 300
hb_lower= 0
p <- ggplot(hbdf, aes(x=Hb)) +
geom_density(aes(colour=Site), bins = hb_upper, alpha=1, position="dodge") + ggtitle (paste("Hb Results at UHN", "Hb Range ", hb_lower, "-", hb_upper, ", n =", nrow(hbdf))) + scale_x_continuous(name = "Hemoglobin at Transfusion", breaks = seq(hb_lower, hb_upper, 1),limits=c(hb_lower-1, hb_upper+1)) + ylab ("RBC Units") + theme_bw()
p
p <- ggplot(hbdf, aes(x=Hb)) +
geom_density(aes(colour=Site), bins = hb_upper, alpha=1, position="dodge") + ggtitle (paste("Hb Results at UHN", "Hb Range ", hb_lower, "-", hb_upper, ", n =", nrow(hbdf))) + scale_x_continuous(name = "Hemoglobin at Transfusion", breaks = seq(hb_lower, hb_upper, 1),limits=c(hb_lower-1, hb_upper+1)) + ylab ("RBC Units") + theme_bw()
p
hbdf <- hb_df %>% filter(!(is.na(Hb)))  #remove rows with pre-hb = null
source("C:/Users/Raza/OneDrive - University of Toronto/INTENT_1/PureHb/PureHb/HbAnalysis.R", echo=TRUE)
source("C:/Users/Raza/OneDrive - University of Toronto/INTENT_1/PureHb/PureHb/HbAnalysis.R", echo=TRUE)
library(dplyr)
library(tidyverse)
library(rvest)
library(ggplot2)
library(data.table)
library(igraph)
library(visNetwork)
library(htmlwidgets)
setwd("C:/Users/Raza/OneDrive - University of Toronto/UK Plasma Systematic Review/Nodes Visualization/NodeVisualizer")
#https://kateto.net/networks-r-igraph
#import dataframe
list.files()
nodes <- "nodes.csv"
fullpath <- file.path(getwd(), nodes) #creates the full path for you depending on OS
file.exists(nodes)
st <- read_csv(fullpath)
st_df <- as.data.frame(st)
st_indication <- st_df$Indication
st_category <- st_df$Category
stforks <- length(unique(st_category))
st_study <- st_df$Study
#here i am creating some experimental vectors
nodes3 <- read.csv("nodes2.csv", header=T, as.is=T)
nodes3$weight <- 1
links3 <- read.csv("edges2.csv", header=T, as.is=T)
links3 <- links3 %>% group_by(from) %>% mutate(fromCount=n()) #here I am adding 'weights' to each category based on number of links to the links df
nodes3$weight<-links3$fromCount[match(unlist(nodes3$media),links3$from)]
nodes3 <- replace(nodes3,is.na(nodes3),1) #transferrign weights from links df to nodes df
net2 <- graph_from_data_frame(d=links3, vertices=nodes3, directed=F) #creating graph
V(net2)$color<-nodes3$X #adding color to graph
V(net2)$weight<-nodes3$weight #adding weights to graph
edge.start <- ends(net2, es=E(net2), names=F)[,1]
edge.col <- V(net2)$color[edge.start] #set link color to source
plot(net2, edge.arrow.size=.2, edge.color=edge.col, edge.curved=.1, vertex.size=(V(net2)$weight)*2,vertex.label.cex	=(V(net2)$weight)*1.1*(0.8^((V(net2)$weight)/1.3)), vertex.label.dist=(V(net2)$weight)*0.1, vertex.color=V(net2)$color, asp=0.35) #displaying graph weighed for several things, and aspect ratio of 0.35
#sample code for outcomes
outcomes <- read.csv("outcomes.csv", header=T, as.is=T)
final_df<-as.data.frame(outcomes)
count =0
final_li <- list()
#loop through dataframe above to create new list with outcomes and corresponding papers
for (i in 3:ncol(final_df)) {
temp_li <- list()
temp_li <- append(temp_li, colnames(final_df)[i])#appendoutcome
#print(final_df[,i])
for (j in 1:length(final_df[,i])) {
#print(final_df[j,i])
if (final_df[j,i] ==1) {
#print(final_df[j,2])
temp_li <- append(temp_li, final_df[j,2])
}
}
final_li <- append(final_li,list(temp_li))
}
print(final_li)
#sample code for outcomes with OUTCOMES FIRST
#create a new df with from->to relationships from outcomes ,
out_df<-data.frame(from = character(), to = character()) #df for from->to relationships
count=1
for (i in 1:length(final_li)) {
for (j in 2:length(final_li[[i]])) { #here starting with 2 makes it ignore the name of the clinical outcome itself
out_df[count,] <- c(final_li[[i]][1],final_li[[i]][j]) #creating a from->to list and appending to a dataframe
print(final_li[[i]][1])
print(final_li[[i]][j])
count = count+1
}
}
out_df <- out_df %>% group_by(from) %>% mutate(fromCount=n()) #here I am adding 'weights' to outcome based on # of studies
linksx <- out_df
#######################
linksx <- read.csv("new_links3.csv", header=T, as.is=T) #copying code from above
nodesx <- read.csv("new_nodes2.csv", header=T, as.is=T) #copying code from above
nodesx$weight<-linksx$fromCount[match(unlist(nodesx$media),linksx$from)]
nodesx <- replace(nodesx,is.na(nodesx),1) #transferrign weights from links df to nodes df
net3 <- graph_from_data_frame(d=linksx, vertices=nodesx, directed=F) #creating graph
V(net3)$category<-nodesx$category #adding color to graph
V(net3)$color<-nodesx$color #adding color to graph
#V(net3)$weight<-nodesx$weight #adding weights to graph
V(net3)$weight<-nodesx$nodeweight #adding weights to graph
V(net3)$font<-nodesx$font #adding font style (bold/plain) to graph
V(net3)$fontsize<-nodesx$fontsize #adding font size to graph
V(net3)$fontcolor<-nodesx$fontcolor #adding font size to graph
V(net3)$edgewidth<-nodesx$edgewidth #adding font size to graph
V(net3)$edgecolor<-nodesx$edgecolor #adding font size to graph
#V(net3)$edgewidth<-linksx$edgewidth #adding color to graph
#V(net3)$name <- ifelse ((V(net3)$weight > 10),paste0(V(net3)$name, "=", V(net3)$weight),(V(net3)$name)) #add sample weights to the name
edge.start <- ends(net3, es=E(net3), names=F)[,2] #what's happenign is that you are using 'ends' to get the edges of this network,which gives you a 2 column list of pairs of numbers for start and end of the edges. you then pick [,2] which represents the end (you could've picked the start), which you can then use to feed into edge.start for later use in the next
edge.col <- V(net3)$color[edge.start] #set link color to source (edge.start) or target (edge.target)
edge.width <- V(net3)$edgewidth[edge.start] #set link color to source (edge.start) or target (edge.target)
#tail_of(fg, edge.of.interest)$value
#edge.start <- ends(net3, es=E(net3), names=F)[,1]
#edge.col <- V(net3)$color[edge.target] #set link color to source (edge.start) or target (edge.target)
normalize_01 <- function(x) (x - min(x)) / (max(x) - min(x)) + 0.25
#####################
pdf("plot34.pdf",19,13)
#pdf("plot34.pdf",10,7)
#this one is for studies included
#plot(net3, edge.arrow.size=.2,edge.curved=.1,edge.color=edge.col,vertex.size=((2+((V(net3)$weight)/3))/2),vertex.label.cex	=V(net3)$fontsize/5, vertex.label.dist=0, vertex.color=V(net3)$color, vertex.frame.color =V(net3)$color,  asp=0, layout=layout.fruchterman.reingold, vertex.label.font=normalize_01(c(V(net3)$font)), vertex.label.family="sans",  vertex.label.color=c(V(net3)$fontcolor), vertex.shape="circle", edge.width=edge.width, edge.curved=1) #displaying graph weighed for several things, and aspect ratio of 0.35
plot(net3, edge.arrow.size=.2,edge.curved=.1,edge.color=edge.col,vertex.size=V(net3)$weight/10,vertex.label.cex	=(V(net3)$fontsize/10)+0.4, vertex.label.dist=0, vertex.color=V(net3)$color, vertex.frame.color =V(net3)$color,  asp=0.5, layout=layout.fruchterman.reingold, vertex.label.font=normalize_01(c(V(net3)$font)), vertex.label.family="sans",  vertex.label.color=c(V(net3)$fontcolor), vertex.shape="circle", edge.width=edge.width, edge.curved=1) #displaying graph weighed for several things, and aspect ratio of 0.35
#saveWidget(visIgraph(g), file = "test.html")
dev.off()
#############
net3plot <- toVisNetworkData(net3) # convert the graph (or use visIgraph)
net3vis <- visNetwork(nodes = net3plot$nodes ,
color = net3plot$nodes$color,
edges = net3plot$edges,
main = "Plasma Systematic Review",
submain = "Interactive Figure",
footer = "")
net3vis <- net3vis %>%
visIgraphLayout(layout = "layout_with_kk", # or use igraph's `layout_*`s in quotes
# layout = "layout.norm",  # using saved coords? set this!
# layoutMatrix = coords,   # our previous coords
smooth = FALSE,            # set to F when bogged by bigger graphs
physics = TRUE             # set to F when bogged by bigger graphs
)
net3vis
###############
#saving default
#plot(net3, edge.arrow.size=.2,edge.curved=.1,edge.color=edge.col,vertex.size=((2+((V(net3)$weight)/3))/2),vertex.label.cex	=0.5+(555^(-1/(V(net3)$weight))), vertex.label.dist=0.5, vertex.color=V(net3)$color, asp=0.4) #displaying graph weighed for several things, and aspect ratio of 0.35
#
# colrs<-c("red", "blue","gold","yellow","orange","brown","violet","green","purple", "lightblue", "darkred", "darkgreen")
# V(net2)$color <- colrs[V(net2)$category]
# V(net2)$label.color <- "black"
#
#tr <- make_tree(length(st_indication), children = 20, mode = "undirected")
#plot(tr, vertex.size=10, vertex.label=st_study, vertex.label.cex=0.8,vertex.label.color="black")
#links3 <- links3 %>% group_by(from) %>% mutate(fromCount=n())
#> which(links3$from ==nodes3$media[39])[1]
#links3 <- links3 %>% group_by(from) %>% mutate(fromCount=n())
library(shiny)
# Define the UI
ui <- fluidPage(
titlePanel("Button Multiplier"),
sidebarLayout(
sidebarPanel(
textOutput("myText"),
br(),
actionButton("button1", "1"),
actionButton("button2", "2"),
actionButton("button3", "3")
),
mainPanel(
textOutput("result")
)
)
)
# Define the server logic
server <- function(input, output) {
totalProbability <- reactiveVal(1)
observeEvent(input$button1, {
totalProbability(totalProbability() * 1)
})
observeEvent(input$button2, {
totalProbability(totalProbability() * 2)
})
observeEvent(input$button3, {
totalProbability(totalProbability() * 3)
})
output$myText
library(shiny)
totalProbability <- 1
buttons <- c("1", "2", "3")
ui <- fluidPage(
titlePanel("Button Multiplier"),
sidebarLayout(
sidebarPanel(
textOutput("myText"),
br(),
actionButton(inputId = "button1", label = buttons[1]),
actionButton(inputId = "button2", label = buttons[2]),
actionButton(inputId = "button3", label = buttons[3])
),
mainPanel(
h4("Instructions"),
p("Click on a button to multiply the total probability."),
p("The updated value will be shown below.")
)
)
)
server <- function(input, output) {
observeEvent(input$button1, {
totalProbability <<- totalProbability * as
library(shiny)
totalProbability <- 1
buttons <- c("1", "2", "3")
ui <- fluidPage(
titlePanel("Button Multiplier"),
sidebarLayout(
sidebarPanel(
textOutput("myText"),
br(),
actionButton(inputId = "button1", label = buttons[1]),
actionButton(inputId = "button2", label = buttons[2]),
actionButton(inputId = "button3", label = buttons[3])
),
mainPanel(
h4("Instructions"),
p("Click on a button to multiply the total probability."),
p("The updated value will be shown below.")
)
)
)
server <- function(input, output) {
observeEvent(input$button1, {
totalProbability <<- totalProbability * as
library(shiny)
totalProbability <- 1
buttons <- c("1", "2", "3")
ui <- fluidPage(
titlePanel("Button Multiplier"),
sidebarLayout(
sidebarPanel(
textOutput("myText"),
br(),
actionButton(inputId = "button1", label = buttons[1]),
actionButton(inputId = "button2", label = buttons[2]),
actionButton(inputId = "button3", label = buttons[3])
),
mainPanel(
h4("Instructions"),
p("Click on a button to multiply the total probability."),
p("The updated value will be shown below.")
)
)
)
server <- function(input, output) {
observeEvent(input$button1, {
totalProbability <<- totalProbability * as.numeric(buttons[1])
})
observeEvent(input$button2, {
totalProbability <<- totalProbability * as.numeric(buttons[2])
})
observeEvent(input$button3, {
totalProbability <<- totalProbability * as.numeric(buttons[3])
})
output$myText <- renderText({
paste("Total Probability:", totalProbability)
})
}
shinyApp(ui, server)
library(shiny)
totalProbability <- 1
buttons <- c("1", "2", "3")
ui <- fluidPage(
titlePanel("Button Multiplier"),
sidebarLayout(
sidebarPanel(
textOutput("myText"),
br(),
actionButton(inputId = "button1", label = buttons[1]),
actionButton(inputId = "button2", label = buttons[2]),
actionButton(inputId = "button3", label = buttons[3])
),
mainPanel(
h4("Instructions"),
p("Click on a button to multiply the total probability."),
p("The updated value will be shown below.")
)
)
)
server <- function(input, output) {
observeEvent(input$button1, {
totalProbability <<- totalProbability * as.numeric(buttons[1])
})
observeEvent(input$button2, {
totalProbability <<- totalProbability * as.numeric(buttons[2])
})
observeEvent(input$button3, {
totalProbability <<- totalProbability * as.numeric(buttons[3])
})
output$myText <- renderText({
paste("Total Probability:", totalProbability)
})
}
shinyApp(ui, server)
library(shiny)
# Define the UI
ui <- fluidPage(
titlePanel("Button Multiplication"),
sidebarLayout(
sidebarPanel(
h3("Buttons"),
actionButton("button1", "1"),
actionButton("button2", "2"),
actionButton("button3", "3")
),
mainPanel(
h3("Total Probability:"),
verbatimTextOutput("totalProbability")
)
)
)
# Define the server
server <- function(input, output) {
# Initialize total probability
totalProbability <- reactiveVal(1)
# Update total probability when a button is pressed
observeEvent(input$button1, {
totalProbability(totalProbability() * as.numeric(input$button1))
})
observeEvent(input$button2, {
totalProbability(totalProbability() * as.numeric(input$button2))
})
observeEvent(input$button3, {
totalProbability(totalProbability() * as.numeric(input$button3))
})
# Output the total probability
output$totalProbability <- renderPrint({
totalProbability()
})
}
# Run the app
shinyApp(ui = ui, server = server)
